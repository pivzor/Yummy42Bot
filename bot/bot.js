const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const token = process.env.TELEGRAM_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const webAppUrl = process.env.WEB_APP_URL;

const orders = {};

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!', {
        reply_markup: {
            keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é üçΩÔ∏è', web_app: { url: webAppUrl } }]],
            resize_keyboard: true
        }
    });
});

bot.on('web_app_data', async (msg) => {
    try {
        const data = JSON.parse(msg.web_app_data.data);
        console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –∏–∑ WebApp:', data);

        if (!data.items || data.items.length === 0) {
            await bot.sendMessage(msg.chat.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
            return;
        }

        orders[msg.chat.id] = {
            items: data.items,
            total: data.total,
            timestamp: data.timestamp || new Date().toISOString()
        };

        let orderMessage = '*–í–∞—à –∑–∞–∫–∞–∑:*\n\n';
        
        data.items.forEach(item => {
            const itemTotal = item.totalPrice * item.quantity;
            orderMessage += `*${item.name}* x${item.quantity}\n` +
                          `   –¶–µ–Ω–∞: ${item.totalPrice} ‚ÇΩ –∑–∞ —à—Ç\n` +
                          `   –ò—Ç–æ–≥–æ: *${itemTotal} ‚ÇΩ*\n`;
            
            if (item.modifiers && item.modifiers.length > 0) {
                orderMessage += `   –î–æ–±–∞–≤–∫–∏: ${item.modifiers.join(', ')}\n`;
            }
            
            orderMessage += '\n';
        });

        const totalAmount = data.items.reduce((sum, item) => sum + (item.totalPrice * item.quantity), 0);
        orderMessage += `*–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalAmount} ‚ÇΩ*\n\n`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'confirm_order' },
                        { text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'add_comment' }
                    ],
                    [
                        { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω', callback_data: 'pay_online' },
                        { text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏', callback_data: 'pay_cash' }
                    ],
                    [
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancel_order' }
                    ]
                ]
            }
        };

        await bot.sendMessage(msg.chat.id, orderMessage, options);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error);
        await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    try {
        switch (data) {
            case 'confirm_order':
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!' });
                await processOrder(chatId, '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
                break;
                
            case 'add_comment':
                await bot.answerCallbackQuery(callbackQuery.id);
                orders[chatId].waitingForComment = true;
                await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:');
                break;
                
            case 'pay_online':
                await bot.answerCallbackQuery(callbackQuery.id);
                await bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω. –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...');
                break;
                
            case 'pay_cash':
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' });
                await bot.sendMessage(chatId, '–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.');
                break;
                
            case 'cancel_order':
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω' });
                delete orders[chatId];
                await bot.sendMessage(chatId, '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.');
                break;
                
            case 'confirm_with_comment':
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º!' });
                await processOrder(chatId, `–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: ${orders[chatId].comment || '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`);
                break;
        }

        await bot.editMessageReplyMarkup(
            { inline_keyboard: [] },
            { chat_id: chatId, message_id: messageId }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    if (orders[chatId] && orders[chatId].waitingForComment) {
        orders[chatId].comment = msg.text;
        orders[chatId].waitingForComment = false;

        await bot.sendMessage(chatId, '–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_with_comment' },
                        { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'add_comment' }
                    ]
                ]
            }
        });
    }
});

async function processOrder(chatId, status) {
    if (!orders[chatId]) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.');
        return;
    }
    
    const order = orders[chatId];
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞:', {
        chatId,
        items: order.items,
        total: order.total,
        comment: order.comment,
        status,
        timestamp: order.timestamp
    });
    
    await bot.sendMessage(chatId, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #' + Math.floor(Math.random() * 10000));
    
    delete orders[chatId];
}